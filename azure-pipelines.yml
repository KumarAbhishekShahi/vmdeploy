# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'vs2017-win2016'
  name: Azure Pipelines

steps:
- checkout: self
  displayName: "Checkout Pipeline"

- task: CopyFiles@2
  displayName: 'Copy Files to Stage Directory'
  inputs:
    SourceFolder: config
    Contents: '**.tf'
    TargetFolder: '$(build.artifactstagingdirectory)/Terraform'

- task: PublishBuildArtifacts@1
  displayName: "Publish Build Artifacts"
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- task: DownloadBuildArtifacts@0
  displayName: 'Download Build Artifacts'
  inputs:
    artifactName: drop
    downloadPath: $(System.DefaultWorkingDirectory)

- task: TerraformInstaller@0
  displayName: "Terraform Install"
  inputs:
    terraformVersion: '0.12.25'

- task: AzureCLI@2
  displayName: "Prep Step for Terraform"
  inputs:
    azureSubscription: 'Azure for Students (c4b8ac58-e4e0-438d-a04e-30604e28751c)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az group create --location westus2 --name $(TerraformBackend.ResourceGroup)
      az storage account create --name $(TerraformBackend.StorageAccount) --resource-group $(TerraformBackend.ResourceGroup) --location westus2 --sku Standard_LRS
      az storage container create --name staging --account-name $(TerraformBackend.StorageAccount)
      STORAGE_ACCOUNT_KEY=$(az storage account keys list -g $(TerraformBackend.ResourceGroup) -n $(TerraformBackend.StorageAccount) | jq ".[0].value" -r)
    addSpnToEnvironment: true
    workingDirectory: 'D:\a\1\s\drop\Terraform\'

- task: TerraformTaskV1@0
  displayName: "Terraform Init"
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: 'Azure for Students (c4b8ac58-e4e0-438d-a04e-30604e28751c)'
    backendAzureRmResourceGroupName: '$(TerraformBackend.ResourceGroup)'
    backendAzureRmStorageAccountName: '$(TerraformBackend.StorageAccount)'
    backendAzureRmContainerName: 'stage'
    backendAzureRmKey: 'tf/terraform.tfstate'
    workingDirectory: 'D:\a\1\s\drop\Terraform\'

- task: TerraformTaskV1@0
  displayName: "Terraform Plan"
  inputs:
    provider: 'azurerm'
    command: 'plan'
    backendServiceArm: 'Azure for Students (c4b8ac58-e4e0-438d-a04e-30604e28751c)'
    backendAzureRmResourceGroupName: '$(TerraformBackend.ResourceGroup)'
    backendAzureRmStorageAccountName: '$(TerraformBackend.StorageAccount)'
    environmentServiceNameAzureRM: 'Azure for Students (c4b8ac58-e4e0-438d-a04e-30604e28751c)'
    backendAzureRmContainerName: 'stage'
    backendAzureRmKey: 'tf/terraform.tfstate'
    workingDirectory: 'D:\a\1\s\drop\Terraform\'

- task: TerraformTaskV1@0
  displayName: "Terraform Apply"
  inputs:
    provider: 'azurerm'
    command: 'apply'
    backendServiceArm: 'Azure for Students (c4b8ac58-e4e0-438d-a04e-30604e28751c)'
    backendAzureRmResourceGroupName: '$(TerraformBackend.ResourceGroup)'
    backendAzureRmStorageAccountName: '$(TerraformBackend.StorageAccount)'
    environmentServiceNameAzureRM: 'Azure for Students (c4b8ac58-e4e0-438d-a04e-30604e28751c)'
    backendAzureRmContainerName: 'stage'
    backendAzureRmKey: 'tf/terraform.tfstate'
    workingDirectory: 'D:\a\1\s\drop\Terraform\'

- task: SSH@0
  displayName: "Install and Configure - JDK, Tomcat"
  inputs:
    sshEndpoint: 'VMCon'
    runOptions: 'inline'
    inline: |
      #update Ubuntu
      sudo apt-get update
      #install JDK
      yes | sudo apt-get install default-jdk
      #Create Tomcat group
      sudo groupadd tomcat
      #create tomcat user
      sudo useradd -s /bin/false -g tomcat -d /opt/tomcat tomcat
      #goto tmp folder
      cd /tmp
      #install tomcat from given URL
      curl -O http://apachemirror.wuchna.com/tomcat/tomcat-8/v8.5.56/bin/apache-tomcat-8.5.56.tar.gz
      #create folder and extract archive
      sudo mkdir -p /opt/tomcat
      sudo tar xzvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1
      cd /opt/tomcat
      sudo chown -R tomcat webapps/ work/ temp/ logs/
      #Update permission
      sudo chgrp -R tomcat /opt/tomcat
      sudo chmod -R g+r conf
      sudo chmod g+x conf
      #Start tomcat
      sudo chmod 777 /opt/tomcat/bin/startup.sh
      sudo /opt/tomcat/bin/startup.sh
    readyTimeout: '20000'
